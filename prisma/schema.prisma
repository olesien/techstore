generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id          Int       @id @unique(map: "id_UNIQUE") @default(autoincrement())
  name        String?   @db.VarChar(45)
  firstname   String    @db.VarChar(45)
  lastname    String?   @db.VarChar(45)
  mail        String    @unique(map: "mail_UNIQUE") @db.VarChar(55)
  password    String    @db.VarChar(150)
  postnumber  Int?
  postcity    String?   @db.VarChar(35)
  phonenumber String?   @db.VarChar(38)
  verified    Boolean?  @default(false)
  admin       Boolean?  @default(false)
  image       Bytes?    @db.Blob
  address     String?   @db.VarChar(45)
  orders      orders[]
  reviews     reviews[]
}

model categories {
  id                 Int                  @id @unique(map: "id_UNIQUE") @default(autoincrement())
  name               String               @unique(map: "name_UNIQUE") @db.VarChar(45)
  icon               Bytes?               @db.Blob
  categories_filters categories_filters[]
  products           products[]
}

model orders {
  id              Int               @id @unique(map: "id_UNIQUE") @default(autoincrement())
  date            DateTime          @db.Date
  userid          Int?
  status          String            @db.VarChar(45)
  firstname       String?           @db.VarChar(45)
  lastname        String?           @db.VarChar(45)
  mail            String            @db.VarChar(45)
  postnumber      Int
  postcity        String            @db.VarChar(45)
  phonenumber     String?           @db.VarChar(45)
  address         String            @db.VarChar(45)
  users           users?            @relation(fields: [userid], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "orders_ibfk_1")
  orders_products orders_products[]

  @@index([userid], map: "orders_ibfk_2")
}

model orders_products {
  id         Int      @id @unique(map: "id_UNIQUE") @default(autoincrement())
  orderid    Int
  productid  Int
  quantity   Int
  item_price Int
  orders     orders   @relation(fields: [orderid], references: [id], onUpdate: Restrict, map: "orders_products_ibfk_1")
  products   products @relation(fields: [productid], references: [id], onUpdate: Restrict, map: "orders_products_ibfk_2")

  @@index([orderid], map: "orderid")
  @@index([productid], map: "productid")
}

model product_images {
  id        Int      @id @unique(map: "id_UNIQUE") @default(autoincrement())
  name      String?  @db.VarChar(45)
  productid Int
  image     String   @db.VarChar(50)
  products  products @relation(fields: [productid], references: [id], onUpdate: Restrict, map: "product_images_ibfk_1")

  @@index([productid], map: "productid")
}

model product_specs {
  id           Int      @id @unique(map: "id_UNIQUE") @default(autoincrement())
  title        String   @db.VarChar(45)
  content      String   @db.Text
  productid    Int
  speccategory String?  @db.VarChar(45)
  extrainfo    String?  @db.VarChar(45)
  products     products @relation(fields: [productid], references: [id], onUpdate: Restrict, map: "product_specs_ibfk_1")

  @@index([productid], map: "productid")
}

model products {
  id                                                 Int               @id @unique(map: "id_UNIQUE") @default(autoincrement())
  categoryid                                         Int
  name                                               String            @db.VarChar(45)
  quickspecs                                         String?           @db.VarChar(100)
  description                                        String?           @db.Text
  price                                              Int
  oldprice                                           Int?
  instock                                            Int?
  orders_products                                    orders_products[]
  product_compat_product_compat_productid1Toproducts product_compat[]  @relation("product_compat_productid1Toproducts")
  product_compat_product_compat_productid2Toproducts product_compat[]  @relation("product_compat_productid2Toproducts")
  product_images                                     product_images[]
  product_specs                                      product_specs[]
  categories                                         categories        @relation(fields: [categoryid], references: [id], onUpdate: Restrict, map: "products_ibfk_1")
  reviews                                            reviews[]

  @@index([categoryid], map: "categoryid")
  @@fulltext([name], map: "name")
}

model reviews {
  id         Int       @unique(map: "id_UNIQUE") @default(autoincrement())
  userid     Int
  content    String    @db.Text
  rating     Int       @db.SmallInt
  productid  Int
  timeposted DateTime? @db.Timestamp(0)
  products   products  @relation(fields: [productid], references: [id], onUpdate: Restrict, map: "reviews_ibfk_1")
  users      users     @relation(fields: [userid], references: [id], onUpdate: Restrict, map: "reviews_ibfk_2")

  @@id([id, userid])
  @@index([productid], map: "productid")
  @@index([userid], map: "userid")
}

model categories_filters {
  id         Int        @id @default(autoincrement())
  title      String     @db.VarChar(45)
  type       String     @db.VarChar(45)
  categoryid Int
  value      String     @db.VarChar(45)
  categories categories @relation(fields: [categoryid], references: [id], onUpdate: Restrict, map: "categories_filters_ibfk_1")

  @@index([categoryid], map: "categoryid")
}

model product_compat {
  id                                           Int      @id @default(autoincrement())
  productid1                                   Int
  productid2                                   Int
  error                                        Boolean
  message                                      String   @db.VarChar(200)
  products_product_compat_productid1Toproducts products @relation("product_compat_productid1Toproducts", fields: [productid1], references: [id], onUpdate: Restrict, map: "product_compat_ibfk_1")
  products_product_compat_productid2Toproducts products @relation("product_compat_productid2Toproducts", fields: [productid2], references: [id], onUpdate: Restrict, map: "product_compat_ibfk_2")

  @@index([productid1], map: "productid1")
  @@index([productid2], map: "productid2")
}
